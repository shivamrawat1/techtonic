{
    "two_sum": {
        "title": "Two Sum",
        "difficulty": "Easy",
        "description": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice.",
        "examples": [
            {
                "input": "nums = [2,7,11,15], target = 9",
                "output": "[0,1]",
                "explanation": "Because nums[0] + nums[1] == 9, we return [0, 1]."
            },
            {
                "input": "nums = [3,2,4], target = 6",
                "output": "[1,2]",
                "explanation": "Because nums[1] + nums[2] == 6, we return [1, 2]."
            },
            {
                "input": "nums = [3,3], target = 6",
                "output": "[0,1]",
                "explanation": "Because nums[0] + nums[1] == 6, we return [0, 1]."
            }
        ],
        "constraints": [
            "2 <= nums.length <= 10^4",
            "-10^9 <= nums[i] <= 10^9",
            "-10^9 <= target <= 10^9",
            "Only one valid answer exists."
        ],
        "function_signature": "def two_sum(nums, target):"
    },
    "rotten_oranges": {
        "title": "Rotten Oranges",
        "difficulty": "Medium",
        "description": "You are given an m x n grid where each cell can have one of three values: 0 representing an empty cell, 1 representing a fresh orange, or 2 representing a rotten orange. Every minute, any fresh orange that is 4-directionally adjacent to a rotten orange becomes rotten. Return the minimum number of minutes that must elapse until no cell has a fresh orange. If this is impossible, return -1.",
        "examples": [
            {
                "input": "grid = [[2,1,1],[1,1,0],[0,1,1]]",
                "output": "4",
                "explanation": "After 4 minutes, all oranges are rotten."
            },
            {
                "input": "grid = [[2,1,1],[0,1,1],[1,0,1]]",
                "output": "-1",
                "explanation": "The orange in the bottom left corner (row 2, column 0) is never rotten, because rotting only happens 4-directionally."
            },
            {
                "input": "grid = [[0,2]]",
                "output": "0",
                "explanation": "Since there are already no fresh oranges at minute 0, the answer is just 0."
            }
        ],
        "constraints": [
            "m == grid.length",
            "n == grid[i].length",
            "1 <= m, n <= 10",
            "grid[i][j] is 0, 1, or 2."
        ],
        "function_signature": "def oranges_rotting(grid):"
    },
    "valid_palindrome": {
        "title": "Valid Palindrome",
        "difficulty": "Easy",
        "description": "A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers. Given a string s, return true if it is a palindrome, or false otherwise.",
        "examples": [
            {
                "input": "s = \"A man, a plan, a canal: Panama\"",
                "output": "true",
                "explanation": "\"amanaplanacanalpanama\" is a palindrome."
            },
            {
                "input": "s = \"race a car\"",
                "output": "false",
                "explanation": "\"raceacar\" is not a palindrome."
            },
            {
                "input": "s = \" \"",
                "output": "true",
                "explanation": "s is an empty string \"\" after removing non-alphanumeric characters. Since an empty string reads the same forward and backward, it is a palindrome."
            }
        ],
        "constraints": [
            "1 <= s.length <= 2 * 10^5",
            "s consists only of printable ASCII characters."
        ],
        "function_signature": "def is_palindrome(s):"
    },
    "merge_intervals": {
        "title": "Merge Intervals",
        "difficulty": "Medium",
        "description": "Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.",
        "examples": [
            {
                "input": "intervals = [[1,3],[2,6],[8,10],[15,18]]",
                "output": "[[1,6],[8,10],[15,18]]",
                "explanation": "Since intervals [1,3] and [2,6] overlap, merge them into [1,6]."
            },
            {
                "input": "intervals = [[1,4],[4,5]]",
                "output": "[[1,5]]",
                "explanation": "Intervals [1,4] and [4,5] are considered overlapping."
            }
        ],
        "constraints": [
            "1 <= intervals.length <= 10^4",
            "intervals[i].length == 2",
            "0 <= starti <= endi <= 10^4"
        ],
        "function_signature": "def merge(intervals):"
    },
    "longest_substring": {
        "title": "Longest Substring Without Repeating Characters",
        "difficulty": "Medium",
        "description": "Given a string s, find the length of the longest substring without repeating characters.",
        "examples": [
            {
                "input": "s = \"abcabcbb\"",
                "output": "3",
                "explanation": "The answer is \"abc\", with the length of 3."
            },
            {
                "input": "s = \"bbbbb\"",
                "output": "1",
                "explanation": "The answer is \"b\", with the length of 1."
            },
            {
                "input": "s = \"pwwkew\"",
                "output": "3",
                "explanation": "The answer is \"wke\", with the length of 3. Notice that the answer must be a substring, \"pwke\" is a subsequence and not a substring."
            }
        ],
        "constraints": [
            "0 <= s.length <= 5 * 10^4",
            "s consists of English letters, digits, symbols and spaces."
        ],
        "function_signature": "def length_of_longest_substring(s):"
    },
    "binary_tree_level_order": {
        "title": "Binary Tree Level Order Traversal",
        "difficulty": "Medium",
        "description": "Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).",
        "examples": [
            {
                "input": "root = [3,9,20,null,null,15,7]",
                "output": "[[3],[9,20],[15,7]]",
                "explanation": "The tree has 3 levels, with values arranged level by level."
            },
            {
                "input": "root = [1]",
                "output": "[[1]]",
                "explanation": "The tree has only one node."
            },
            {
                "input": "root = []",
                "output": "[]",
                "explanation": "The tree is empty."
            }
        ],
        "constraints": [
            "The number of nodes in the tree is in the range [0, 2000].",
            "-1000 <= Node.val <= 1000"
        ],
        "function_signature": "def level_order(root):"
    },
    "trapping_rain_water": {
        "title": "Trapping Rain Water",
        "difficulty": "Hard",
        "description": "Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.",
        "examples": [
            {
                "input": "height = [0,1,0,2,1,0,1,3,2,1,2,1]",
                "output": "6",
                "explanation": "The elevation map is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water are being trapped."
            },
            {
                "input": "height = [4,2,0,3,2,5]",
                "output": "9",
                "explanation": "The elevation map is represented by array [4,2,0,3,2,5]. In this case, 9 units of rain water are being trapped."
            }
        ],
        "constraints": [
            "n == height.length",
            "1 <= n <= 2 * 10^4",
            "0 <= height[i] <= 10^5"
        ],
        "function_signature": "def trap(height):"
    },
    "reverse_linked_list": {
        "title": "Reverse Linked List",
        "difficulty": "Easy",
        "description": "Given the head of a singly linked list, reverse the list, and return the reversed list.",
        "examples": [
            {
                "input": "head = [1,2,3,4,5]",
                "output": "[5,4,3,2,1]",
                "explanation": "The linked list is reversed."
            },
            {
                "input": "head = [1,2]",
                "output": "[2,1]",
                "explanation": "The linked list with two nodes is reversed."
            },
            {
                "input": "head = []",
                "output": "[]",
                "explanation": "Empty list remains empty."
            }
        ],
        "constraints": [
            "The number of nodes in the list is the range [0, 5000].",
            "-5000 <= Node.val <= 5000"
        ],
        "function_signature": "def reverse_list(head):"
    },
    "word_search": {
        "title": "Word Search",
        "difficulty": "Medium",
        "description": "Given an m x n grid of characters board and a string word, return true if word exists in the grid. The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.",
        "examples": [
            {
                "input": "board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCCED\"",
                "output": "true",
                "explanation": "The word \"ABCCED\" can be found by starting at the top-left A and moving through adjacent cells."
            },
            {
                "input": "board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"SEE\"",
                "output": "true",
                "explanation": "The word \"SEE\" can be found in the grid."
            },
            {
                "input": "board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCB\"",
                "output": "false",
                "explanation": "The word \"ABCB\" cannot be found in the grid as the same letter cell may not be used more than once."
            }
        ],
        "constraints": [
            "m == board.length",
            "n = board[i].length",
            "1 <= m, n <= 6",
            "1 <= word.length <= 15",
            "board and word consists of only lowercase and uppercase English letters."
        ],
        "function_signature": "def exist(board, word):"
    },
    "lru_cache": {
        "title": "LRU Cache",
        "difficulty": "Medium",
        "description": "Design a data structure that follows the constraints of a Least Recently Used (LRU) cache. Implement the LRUCache class: LRUCache(int capacity) Initialize the LRU cache with positive size capacity. int get(int key) Return the value of the key if the key exists, otherwise return -1. void put(int key, int value) Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the number of keys exceeds the capacity from this operation, evict the least recently used key.",
        "examples": [
            {
                "input": "LRUCache lRUCache = new LRUCache(2); lRUCache.put(1, 1); lRUCache.put(2, 2); lRUCache.get(1); lRUCache.put(3, 3); lRUCache.get(2); lRUCache.put(4, 4); lRUCache.get(1); lRUCache.get(3); lRUCache.get(4);",
                "output": "[null, null, null, 1, null, -1, null, -1, 3, 4]",
                "explanation": "LRUCache lRUCache = new LRUCache(2); lRUCache.put(1, 1); // cache is {1=1} lRUCache.put(2, 2); // cache is {1=1, 2=2} lRUCache.get(1);    // return 1 lRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3} lRUCache.get(2);    // returns -1 (not found) lRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3} lRUCache.get(1);    // return -1 (not found) lRUCache.get(3);    // return 3 lRUCache.get(4);    // return 4"
            }
        ],
        "constraints": [
            "1 <= capacity <= 3000",
            "0 <= key <= 10^4",
            "0 <= value <= 10^5",
            "At most 2 * 10^5 calls will be made to get and put."
        ],
        "function_signature": "class LRUCache:"
    },
    "median_of_two_sorted_arrays": {
        "title": "Median of Two Sorted Arrays",
        "difficulty": "Hard",
        "description": "Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).",
        "examples": [
            {
                "input": "nums1 = [1,3], nums2 = [2]",
                "output": "2.00000",
                "explanation": "merged array = [1,2,3] and median is 2."
            },
            {
                "input": "nums1 = [1,2], nums2 = [3,4]",
                "output": "2.50000",
                "explanation": "merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5."
            }
        ],
        "constraints": [
            "nums1.length == m",
            "nums2.length == n",
            "0 <= m <= 1000",
            "0 <= n <= 1000",
            "1 <= m + n <= 2000",
            "-10^6 <= nums1[i], nums2[i] <= 10^6"
        ],
        "function_signature": "def find_median_sorted_arrays(nums1, nums2):"
    },
    "climbing_stairs": {
        "title": "Climbing Stairs",
        "difficulty": "Easy",
        "description": "You are climbing a staircase. It takes n steps to reach the top. Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?",
        "examples": [
            {
                "input": "n = 2",
                "output": "2",
                "explanation": "There are two ways to climb to the top. 1. 1 step + 1 step 2. 2 steps"
            },
            {
                "input": "n = 3",
                "output": "3",
                "explanation": "There are three ways to climb to the top. 1. 1 step + 1 step + 1 step 2. 1 step + 2 steps 3. 2 steps + 1 step"
            }
        ],
        "constraints": [
            "1 <= n <= 45"
        ],
        "function_signature": "def climb_stairs(n):"
    },
    "course_schedule": {
        "title": "Course Schedule",
        "difficulty": "Medium",
        "description": "There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai. For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1. Return true if you can finish all courses. Otherwise, return false.",
        "examples": [
            {
                "input": "numCourses = 2, prerequisites = [[1,0]]",
                "output": "true",
                "explanation": "There are a total of 2 courses to take. To take course 1 you should have finished course 0. So it is possible."
            },
            {
                "input": "numCourses = 2, prerequisites = [[1,0],[0,1]]",
                "output": "false",
                "explanation": "There are a total of 2 courses to take. To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible."
            }
        ],
        "constraints": [
            "1 <= numCourses <= 2000",
            "0 <= prerequisites.length <= 5000",
            "prerequisites[i].length == 2",
            "0 <= ai, bi < numCourses",
            "All the pairs prerequisites[i] are unique."
        ],
        "function_signature": "def can_finish(num_courses, prerequisites):"
    },
    "group_anagrams": {
        "title": "Group Anagrams",
        "difficulty": "Medium",
        "description": "Given an array of strings strs, group the anagrams together. You can return the answer in any order.",
        "examples": [
            {
                "input": "strs = [\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]",
                "output": "[[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]"
            }
        ],
        "constraints": [
            "1 <= strs.length <= 10^4",
            "0 <= strs[i].length <= 100",
            "strs[i] consists of lowercase English letters."
        ],
        "function_signature": "def group_anagrams(strs):"
    },
    "kth_largest_element": {
        "title": "Kth Largest Element in an Array",
        "difficulty": "Medium",
        "description": "Given an integer array nums and an integer k, return the kth largest element in the array.",
        "examples": [
            {
                "input": "nums = [3,2,1,5,6,4], k = 2",
                "output": "5"
            }
        ],
        "constraints": [
            "1 <= k <= nums.length <= 10^4",
            "-10^4 <= nums[i] <= 10^4"
        ],
        "function_signature": "def find_kth_largest(nums, k):"
    },
    "subsets": {
        "title": "Subsets",
        "difficulty": "Medium",
        "description": "Given an integer array nums of unique elements, return all possible subsets (the power set).",
        "examples": [
            {
                "input": "nums = [1,2,3]",
                "output": "[[],[1],[2],[3],[1,2],[1,3],[2,3],[1,2,3]]"
            }
        ],
        "constraints": [
            "1 <= nums.length <= 10",
            "-10 <= nums[i] <= 10",
            "All elements are unique."
        ],
        "function_signature": "def subsets(nums):"
    },
    "detect_cycle_directed": {
        "title": "Detect Cycle in Directed Graph",
        "difficulty": "Medium",
        "description": "Given a directed graph with n nodes and a list of edges, detect if the graph contains a cycle. Return True if there is a cycle, else False.",
        "examples": [
            {
                "input": "n = 4, edges = [[0,1],[1,2],[2,3],[3,1]]",
                "output": "True"
            }
        ],
        "constraints": [
            "1 <= n <= 10^4",
            "0 <= edges.length <= 10^4"
        ],
        "function_signature": "def has_cycle(n, edges):"
    },
    "minimum_window_substring": {
        "title": "Minimum Window Substring",
        "difficulty": "Hard",
        "description": "Given two strings s and t, return the minimum window in s which contains all the characters of t. If there is no such window, return an empty string \"\".",
        "examples": [
            {
                "input": "s = \"ADOBECODEBANC\", t = \"ABC\"",
                "output": "\"BANC\""
            }
        ],
        "constraints": [
            "1 <= s.length, t.length <= 10^5",
            "s and t consist of English letters."
        ],
        "function_signature": "def min_window(s, t):"
    }
}